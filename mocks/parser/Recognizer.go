// Code generated by mockery v2.9.4. DO NOT EDIT.

package parser

import (
	antlr "github.com/antlr/antlr4/runtime/Go/antlr/v4"
	mock "github.com/stretchr/testify/mock"
)

// Recognizer is an autogenerated mock type for the Recognizer type
type Recognizer struct {
	mock.Mock
}

// Action provides a mock function with given fields: _a0, _a1, _a2
func (_m *Recognizer) Action(_a0 antlr.RuleContext, _a1 int, _a2 int) {
	_m.Called(_a0, _a1, _a2)
}

// AddErrorListener provides a mock function with given fields: _a0
func (_m *Recognizer) AddErrorListener(_a0 antlr.ErrorListener) {
	_m.Called(_a0)
}

// GetATN provides a mock function with given fields:
func (_m *Recognizer) GetATN() *antlr.ATN {
	ret := _m.Called()

	var r0 *antlr.ATN
	if rf, ok := ret.Get(0).(func() *antlr.ATN); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*antlr.ATN)
		}
	}

	return r0
}

// GetErrorListenerDispatch provides a mock function with given fields:
func (_m *Recognizer) GetErrorListenerDispatch() antlr.ErrorListener {
	ret := _m.Called()

	var r0 antlr.ErrorListener
	if rf, ok := ret.Get(0).(func() antlr.ErrorListener); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(antlr.ErrorListener)
		}
	}

	return r0
}

// GetLiteralNames provides a mock function with given fields:
func (_m *Recognizer) GetLiteralNames() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetRuleNames provides a mock function with given fields:
func (_m *Recognizer) GetRuleNames() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// GetState provides a mock function with given fields:
func (_m *Recognizer) GetState() int {
	ret := _m.Called()

	var r0 int
	if rf, ok := ret.Get(0).(func() int); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(int)
	}

	return r0
}

// GetSymbolicNames provides a mock function with given fields:
func (_m *Recognizer) GetSymbolicNames() []string {
	ret := _m.Called()

	var r0 []string
	if rf, ok := ret.Get(0).(func() []string); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]string)
		}
	}

	return r0
}

// Precpred provides a mock function with given fields: _a0, _a1
func (_m *Recognizer) Precpred(_a0 antlr.RuleContext, _a1 int) bool {
	ret := _m.Called(_a0, _a1)

	var r0 bool
	if rf, ok := ret.Get(0).(func(antlr.RuleContext, int) bool); ok {
		r0 = rf(_a0, _a1)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// RemoveErrorListeners provides a mock function with given fields:
func (_m *Recognizer) RemoveErrorListeners() {
	_m.Called()
}

// Sempred provides a mock function with given fields: _a0, _a1, _a2
func (_m *Recognizer) Sempred(_a0 antlr.RuleContext, _a1 int, _a2 int) bool {
	ret := _m.Called(_a0, _a1, _a2)

	var r0 bool
	if rf, ok := ret.Get(0).(func(antlr.RuleContext, int, int) bool); ok {
		r0 = rf(_a0, _a1, _a2)
	} else {
		r0 = ret.Get(0).(bool)
	}

	return r0
}

// SetState provides a mock function with given fields: _a0
func (_m *Recognizer) SetState(_a0 int) {
	_m.Called(_a0)
}
